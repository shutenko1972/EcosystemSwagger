using System.Collections.Concurrent;
using Microsoft.OpenApi.Models;
using Swashbuckle.AspNetCore.SwaggerGen;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("v1", new OpenApiInfo
    {
        Title = "üîê Ai ecosystem test API",
        Version = "1.0.1",
        Description = "<h3><strong>API –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π</strong></h3>" +
                      "<div style='background-color: #f8f9fa; padding: 10px; border-radius: 5px; border-left: 4px solid #3498db;'>" +
                      "<h3 style='color: #2c3e50; margin-top: 0;'>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:</h3>" +
                      "<ul style='color: #7f8c8d;'>" +
                      "<strong><li>–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (Auth)</li></strong>" +
                      "<li>–í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º—É</li>" +
                      "<li>–í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã</li>" +
                      "<li>–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏</li><br>" +
                      "<strong><li>–ß–∞—Ç (Chat)</li></strong>" +
                      "<li>–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ AI-—á–∞—Ç</li>" +
                      "<li>–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞</li>" +
                      "<li>–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞</li><br>" +
                      "<strong><li>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏ (Settings)</li></strong>" +
                      "<li>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã AI-–º–æ–¥–µ–ª–∏</li>" +
                      "<li>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ Top-P AI-–º–æ–¥–µ–ª–∏</li><br>" +
                      "<strong><li>–°–∏—Å—Ç–µ–º–Ω—ã–µ (System)</li></strong>" +
                      "<li>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ </li>" +
                      "<li>–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ</li>" +
                      "</ul>" +
                      "</div>"
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É form-data
    c.OperationFilter<SwaggerFileOperationFilter>();
});

builder.Services.AddSingleton<ConcurrentDictionary<string, SessionInfo>>();
builder.Services.AddScoped<SessionService>();

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();
app.UseAuthorization();
app.MapControllers();

app.Run();

// –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
public class LoginRequest
{
    public string Login { get; set; } = string.Empty;
    public string Password { get; set; } = string.Empty;
}

public class LoginResponse
{
    public string Message { get; set; } = string.Empty;
    public string RedirectUrl { get; set; } = string.Empty;
    public string SessionToken { get; set; } = string.Empty;
}

public class ErrorResponse
{
    public string Error { get; set; } = string.Empty;
}

public class LogoutResponse
{
    public string Message { get; set; } = string.Empty;
}

public class SessionInfoResponse
{
    public bool Valid { get; set; }
    public string UserLogin { get; set; } = string.Empty;
    public DateTime ExpiresAt { get; set; }
}

public class SessionInfo
{
    public string UserLogin { get; set; } = string.Empty;
    public DateTime CreatedAt { get; set; }
    public DateTime ExpiresAt { get; set; }
}

public class ChatResponse
{
    public string Answer { get; set; } = string.Empty;
}

public class TemperatureResponse
{
    public int Value { get; set; }
}

public class TopPResponse
{
    public int Value { get; set; }
}

public class ClearResponse
{
    public string Message { get; set; } = string.Empty;
}

public class CopyResponse
{
    public string Message { get; set; } = string.Empty;
}

public class HealthResponse
{
    public string Status { get; set; } = string.Empty;
}

public class ServerInfoResponse
{
    public string Name { get; set; } = string.Empty;
    public string Version { get; set; } = string.Empty;
}

// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏—è–º–∏
public class SessionService
{
    private readonly ConcurrentDictionary<string, SessionInfo> _sessions;

    public SessionService(ConcurrentDictionary<string, SessionInfo> sessions)
    {
        _sessions = sessions;
    }

    public string CreateSession(string userLogin)
    {
        var sessionToken = Guid.NewGuid().ToString();
        var sessionInfo = new SessionInfo
        {
            UserLogin = userLogin,
            CreatedAt = DateTime.Now,
            ExpiresAt = DateTime.Now.AddHours(1)
        };

        _sessions[sessionToken] = sessionInfo;
        return sessionToken;
    }

    public bool ValidateSession(string sessionToken)
    {
        if (string.IsNullOrEmpty(sessionToken) || !_sessions.TryGetValue(sessionToken, out var session))
            return false;

        if (session.ExpiresAt < DateTime.Now)
        {
            _sessions.TryRemove(sessionToken, out _);
            return false;
        }

        return true;
    }

    public SessionInfo GetSession(string sessionToken)
    {
        if (_sessions.TryGetValue(sessionToken, out var session))
            return session;

        throw new UnauthorizedAccessException("Invalid session");
    }

    public void RemoveSession(string sessionToken)
    {
        _sessions.TryRemove(sessionToken, out _);
    }
}

// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
[ApiController]
[Route("api/auth")]
public class AuthController : ControllerBase
{
    private readonly SessionService _sessionService;

    public AuthController(SessionService sessionService)
    {
        _sessionService = sessionService;
    }

    [HttpPost("login/–í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º—É")]
    [Tags("Auth")]
    public IActionResult Login([FromForm] LoginRequest request)
    {
        if (request.Login != "v_shutenko" || request.Password != "8nEThznM")
        {
            return Unauthorized(new ErrorResponse { Error = "Invalid credentials" });
        }

        var sessionToken = _sessionService.CreateSession(request.Login);

        return Ok(new LoginResponse
        {
            Message = "Success",
            RedirectUrl = "/request/model.html",
            SessionToken = sessionToken
        });
    }

    [HttpPost("logout/–í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã")]
    [Tags("Auth")]
    public IActionResult Logout([FromForm] string sessionToken)
    {
        _sessionService.RemoveSession(sessionToken);
        return Ok(new LogoutResponse { Message = "Logged out" });
    }

    [HttpPost("check-session/–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏")]
    [Tags("Auth")]
    public IActionResult CheckSession([FromForm] string sessionToken)
    {
        try
        {
            var session = _sessionService.GetSession(sessionToken);
            return Ok(new SessionInfoResponse
            {
                Valid = true,
                UserLogin = session.UserLogin,
                ExpiresAt = session.ExpiresAt
            });
        }
        catch (UnauthorizedAccessException)
        {
            return Unauthorized(new ErrorResponse { Error = "Invalid session" });
        }
    }
}

// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —á–∞—Ç–∞
[ApiController]
[Route("api/chat")]
public class ChatController : ControllerBase
{
    private readonly SessionService _sessionService;

    public ChatController(SessionService sessionService)
    {
        _sessionService = sessionService;
    }

    [HttpPost("send/–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ AI-—á–∞—Ç")]
    [Tags("Chat")]
    public IActionResult SendMessage([FromForm] string message, [FromForm] string sessionToken)
    {
        try
        {
            _sessionService.GetSession(sessionToken);

            string response;
            if (message.ToLower().Contains("–ø—Ä–∏–≤–µ—Ç"))
            {
                response = "–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?";
            }
            else if (message.ToLower().Contains("–ø–æ–≥–æ–¥–∞"))
            {
                response = "–ü–æ–≥–æ–¥–∞ —Ö–æ—Ä–æ—à–∞—è";
            }
            else if (message.ToLower().Contains("–≤—Ä–µ–º—è"))
            {
                response = $"–°–µ–π—á–∞—Å {DateTime.Now:HH:mm}";
            }
            else
            {
                response = "–ü–æ–ª—É—á–∏–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å";
            }

            return Ok(new ChatResponse { Answer = response });
        }
        catch (UnauthorizedAccessException)
        {
            return Unauthorized(new ErrorResponse { Error = "Invalid session" });
        }
    }

    [HttpPost("clear/–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞")]
    [Tags("Chat")]
    public IActionResult ClearChat([FromForm] string sessionToken)
    {
        try
        {
            _sessionService.GetSession(sessionToken);
            return Ok(new ClearResponse { Message = "Chat cleared" });
        }
        catch (UnauthorizedAccessException)
        {
            return Unauthorized(new ErrorResponse { Error = "Invalid session" });
        }
    }

    [HttpPost("copy/–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞")]
    [Tags("Chat")]
    public IActionResult CopyText([FromForm] string text, [FromForm] string sessionToken)
    {
        try
        {
            _sessionService.GetSession(sessionToken);
            return Ok(new CopyResponse { Message = "Text copied" });
        }
        catch (UnauthorizedAccessException)
        {
            return Unauthorized(new ErrorResponse { Error = "Invalid session" });
        }
    }
}

// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫
[ApiController]
[Route("api/settings")]
public class SettingsController : ControllerBase
{
    private readonly SessionService _sessionService;

    public SettingsController(SessionService sessionService)
    {
        _sessionService = sessionService;
    }

    [HttpPost("temperature/–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã AI-–º–æ–¥–µ–ª–∏")]
    [Tags("Settings")]
    public IActionResult SetTemperature([FromForm] int value, [FromForm] string sessionToken)
    {
        try
        {
            _sessionService.GetSession(sessionToken);

            if (value < 0 || value > 200)
            {
                return BadRequest(new ErrorResponse { Error = "Value must be between 0 and 200" });
            }

            return Ok(new TemperatureResponse { Value = value });
        }
        catch (UnauthorizedAccessException)
        {
            return Unauthorized(new ErrorResponse { Error = "Invalid session" });
        }
    }

    [HttpPost("topp/–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ Top-P AI-–º–æ–¥–µ–ª–∏")]
    [Tags("Settings")]
    public IActionResult SetTopP([FromForm] int value, [FromForm] string sessionToken)
    {
        try
        {
            _sessionService.GetSession(sessionToken);

            if (value < 0 || value > 100)
            {
                return BadRequest(new ErrorResponse { Error = "Value must be between 0 and 100" });
            }

            return Ok(new TopPResponse { Value = value });
        }
        catch (UnauthorizedAccessException)
        {
            return Unauthorized(new ErrorResponse { Error = "Invalid session" });
        }
    }
}

// –°–∏—Å—Ç–µ–º–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
[ApiController]
[Route("api")]
public class SystemController : ControllerBase
{
    [HttpGet("health/–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞")]
    [Tags("System")]
    public IActionResult HealthCheck()
    {
        return Ok(new HealthResponse { Status = "OK" });
    }

    [HttpGet("info/–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ")]
    [Tags("System")]
    public IActionResult ServerInfo()
    {
        return Ok(new ServerInfoResponse
        {
            Name = "AI Service",
            Version = "1.0.0"
        });
    }

    [HttpGet("Root/–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç")]
    public IActionResult Root()
    {
        return Ok(new { message = "Service API" });
    }
}

// –§–∏–ª—å—Ç—Ä –¥–ª—è Swagger –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ form-data
public class SwaggerFileOperationFilter : IOperationFilter
{
    public void Apply(OpenApiOperation operation, OperationFilterContext context)
    {
        var formContent = context.ApiDescription.ParameterDescriptions
            .Any(p => p.Source.Id == "Form");

        if (formContent)
        {
            operation.RequestBody = new OpenApiRequestBody
            {
                Content =
                {
                    ["application/x-www-form-urlencoded"] = new OpenApiMediaType
                    {
                        Schema = new OpenApiSchema
                        {
                            Type = "object",
                            Properties = context.ApiDescription.ParameterDescriptions
                                .ToDictionary(
                                    p => p.Name,
                                    p => new OpenApiSchema { Type = "string" }
                                )
                        }
                    }
                }
            };
        }
    }
}

// –ê—Ç—Ä–∏–±—É—Ç Tags –¥–ª—è Swagger
public class TagsAttribute : Attribute
{
    public string[] Tags { get; }

    public TagsAttribute(params string[] tags)
    {
        Tags = tags;
    }
}